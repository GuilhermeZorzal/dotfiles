# interpreter for shell commands
set shell bash 
set EDITOR nvim

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'
set icons
set drawbox true
set hidden true
set number true
set relativenumber true

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 20

# Use the `dim` attribute instead of underline for the cursor in the preview pane
set cursorpreviewfmt "\033[7;2m"

# use enter for shell commands
map <enter> shell

# show the result of execution of previous commands
map ` !true

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$nvim \$fx";;
        dir/*) lf -remote "send $id \$nvim \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

cmd nvim &{{
    case $(file --mime-type -Lb $f) in
        *) lf -remote "send $id \$$EDITOR \$fx";;
    esac
}}

cmd vim &{{
    case $(file --mime-type -Lb $f) in
        *) lf -remote "send $id \$vim \$fx";;
    esac
}}

# mkdir command. See wiki if you want it to select created dir
cmd create ${{
    for name in "$@"; do
        ( [[ "$name" == */ ]] && mkdir -p "$name" ) || touch "$name"
    done
}}
map a :push :create<space>

# map t push w

cmd z %{{
    result="$(zoxide query --exclude "$PWD" "$@" | sed 's/\\/\\\\/g;s/"/\\"/g')"
    lf -remote "send $id cd \"$result\""
}}

cmd zi ${{
    result="$(zoxide query -i | sed 's/\\/\\\\/g;s/"/\\"/g')"
    lf -remote "send $id cd \"$result\""
}}

cmd on-cd &{{
    zoxide add "$PWD"
}}
# map t openTerminal

cmd openTerminal &{{
  # get file or dir path: 
  path=$(realpath $f)
  # removing the last part of the path
  path=${path%/*}
  kitty --directory $path
}}


# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
%mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)

cmd delete ${{
    set -f
    printf "$fx\n"
    printf "delete PERMANENTLY?[y/n]"
    read ans
    [ "$ans" = "y" ] && rm -rf $fx
}}

# define a custom 'delete' command
# cmd trash ${{
#     set -f
#     printf "$fx\n"
#       printf "delete?[y/n]"
#     read ans
#     [ "$ans" = "y" ] && mv $fx ~/.trash/
# }}
cmd trash ${{
    set -f
    printf "$fx\n"
    printf "Move to Trash? [y/n] "
    read ans
    if [ "$ans" = "y" ]; then
        dest="$HOME/.trash"
        base=$(basename "$fx")
        target="$dest/$base"

        # If the target exists, find a new name
        if [ -e "$target" ]; then
            i=1
            while [ -e "$dest/${base%%.*}-$i.${base##*.}" ]; do
                i=$((i + 1))
            done
            # Reconstruct the name depending on presence of extension
            if [[ "$base" == *.* ]]; then
                target="$dest/${base%%.*}-$i.${base##*.}"
            else
                target="$dest/${base}-$i"
            fi
        fi

        mv "$fx" "$target"
    fi
}}

# use '<delete>' key for either 'trash' or 'delete' command
map D trash 
map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# Change size of the editor dinamically
cmd on-init :{{
    cmd on-redraw %{{
        if [ "$lf_width" -le 80 ]; then
            lf -remote "send $id set ratios 1:2"
        elif [ "$lf_width" -le 160 ]; then
            lf -remote "send $id set ratios 1:2:3"
        else
            lf -remote "send $id set ratios 1:2:3:5"
        fi
    }}
    on-redraw
}}

cmd edit-config ${{
    $EDITOR ~/.config/lf/lfrc
    lf -remote "send $id source ~/.config/lf/lfrc"
}}

map C edit-config

cmd fzf_search ${{
    cmd="rg --column --line-number --no-heading --color=always --smart-case"
    fzf --ansi --disabled --layout=reverse --header="Search in files" --delimiter=: \
        --bind="start:reload([ -n {q} ] && $cmd -- {q} || true)" \
        --bind="change:reload([ -n {q} ] && $cmd -- {q} || true)" \
        --bind='enter:become(lf -remote "send $id select \"$(printf "%s" {1} | sed '\''s/\\/\\\\/g;s/"/\\"/g'\'')\"")' \
        --preview='cat -- {1}' # Use your favorite previewer here (bat, source-highlight, etc.), for example:
        #--preview-window='+{2}-/2' \
        #--preview='bat --color=always --highlight-line={2} -- {1}'
        # Alternatively you can even use the same previewer you've configured for lf
        #--preview='~/.config/lf/cleaner; ~/.config/lf/previewer {1} "$FZF_PREVIEW_COLUMNS" "$FZF_PREVIEW_LINES" "$FZF_PREVIEW_LEFT" "$FZF_PREVIEW_TOP"'
}}
map sg :fzf_search
map sf $$EDITOR $(fzf)

cmd on-select &{{
    lf -remote "send $id set statfmt \"$(eza -ld --color=always "$f" | sed 's/\\/\\\\/g;s/"/\\"/g')\""
}}

cmd on-cd &{{
    # display repository status in your prompt
    if [ -d .git ] || [ -f .git ]; then
        branch="$(git branch --show-current 2>/dev/null)" || true
        remote="$(git config --get "branch.$branch.remote" 2>/dev/null)" || true
        url="$(git remote get-url "$remote" 2>/dev/null)" || true
        # fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%w\033[0m\033[33;1m [GIT BRANCH:> $branch >> $url]\033[0m"
        fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%w\033[0m\033[33;1m <$branch>\033[0m"
    elif [ -d .hg ]; then
        hg="$(hg branch 2>/dev/null)" || true
        fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%w\033[0m\033[33;1m [HG BRANCH:> $hg]\033[0m"
    elif [ -d .svn ]; then
        svn="$(svn info 2>/dev/null | awk '/^URL: /{print $2}')" || true
        fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%w\033[0m\033[33;1m [SVN URL:> $svn]\033[0m"
    else
        fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%d\033[0m\033[1m%f\033[0m"
    fi
    lf -remote "send $id set promptfmt \"$fmt\""
}}

cmd fzf_jump ${{
    res="$(find . -maxdepth 10 | fzf --reverse --header="Jump to location")"
    if [ -n "$res" ]; then
        if [ -d "$res" ]; then
            cmd="cd"
        else
            cmd="select"
        fi
        res="$(printf '%s' "$res" | sed 's/\\/\\\\/g;s/"/\\"/g')"
        lf -remote "send $id $cmd \"$res\""
    fi
}}
map <c-f> :fzf_jump

cmd git_branch ${{
    git branch | fzf | xargs git checkout
    pwd_shell="$(pwd | sed 's/\\/\\\\/g;s/"/\\"/g')"
    lf -remote "send $id updir; cd \"$pwd_shell\""
}}

cmd git_pull ${{
    git pull --rebase || true
    echo "press ENTER"
    read ENTER
}}

cmd git_status ${{
    git status
    echo "press ENTER"
    read ENTER
}}

cmd git_log ${{
    git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
}}

map gb :git_branch
map gp $clear; git pull --rebase || true; echo "press ENTER"; read ENTER
map gst $clear; git status; echo "press ENTER"; read ENTER
map gl $clear; git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

map J :updir; down; open
map K :updir; up; open


set previewer ~/.config/lf/previewer
set cleaner ~/.config/lf/cleaner
map <c-c> :quit
